package compiledMacro;

import simulator.PrShift;

public class grad {

    public static void slopDelta_3(PrShift p, int[][] pdis, int[][] slop, int[][] deltaR, int[][] level, int[][] resultCA, int[][] lldefVe) {
        int[] lldefVe$e = lldefVe[0], lldefVe$se = lldefVe[1], lldefVe$sw = lldefVe[2], lldefVe$w = lldefVe[3], lldefVe$nw = lldefVe[4], lldefVe$ne = lldefVe[5], slop$e = slop[0], slop$se = slop[1], slop$sw = slop[2], slop$w = slop[3], slop$nw = slop[4], slop$ne = slop[5], deltaR$0 = deltaR[0], deltaR$1 = deltaR[1], level$h = level[0], level$d = level[1], level$ad = level[2], resultCA$h = resultCA[0], resultCA$d = resultCA[1], resultCA$ad = resultCA[2], pdis$0 = pdis[0], pdis$1 = pdis[1], pdis$2 = pdis[2];
        p.mirror(pdis, compiler.Locus.locusV());
        p.prepareBit(pdis)
        ;
// initialisation 
        int auxL03 = 0, auxL04$0 = 0, auxL04$1 = 0, auxL04$2 = 0, auxL05$0 = 0, auxL05$1 = 0, auxL05$2 = 0, auxL09 = 0, auxL10 = 0, auxL11 = 0, auxL12 = 0, auxL13 = 0, auxL14 = 0, auxL15 = 0, auxL16 = 0, auxL17$0 = 0, auxL17$1 = 0, auxL17$2 = 0, auxL18 = 0, auxL19 = 0, auxL20$0 = 0, auxL20$1 = 0, auxL21$0 = 0, auxL21$1 = 0, auxL21$2 = 0, auxL21$3 = 0, auxL22 = 0, auxL23 = 0, auxL24 = 0, auxL25$0 = 0, auxL25$1 = 0, auxL25$2 = 0, auxL25$3 = 0, auxO05 = 0, defVe$e = 0, defVe$ne = 0, defVe$nw = 0, defVe$se = 0, defVe$sw = 0, defVe$w = 0, delta$0 = 0, delta$1 = 0, dis$0 = 0, dis$1 = 0, dis$2 = 0, grad$0 = 0, grad$1 = 0, grad$2 = 0, r0 = 0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0, r7 = 0, tmun00$0 = 0, tmun00$1 = 0, tmun01 = 0, tmun02$0 = 0, tmun02$1 = 0, tmun03 = 0, tmun04$0 = 0, tmun04$1 = 0, tmun05 = 0, tmun06$0 = 0, tmun06$1 = 0, tmun07$0 = 0, tmun07$1 = 0, tmun07$2 = 0, tmun08 = 0, tmun09 = 0, tmun10$0 = 0, tmun10$1 = 0, tmun11$0 = 0, tmun11$1 = 0, tmun11$2 = 0, tmun12 = 0, tmun13 = 0, tmun14$0 = 0, tmun14$1 = 0, tmun15 = 0;
        for (int i = 1; i < pdis$0.length - 1; i++) {
            defVe$e = lldefVe$e[i];
            grad$0 = ((r0 = (auxL05$0 << 1)) ^ dis$0);
            grad$1 = (((r1 = (dis$0 & r0)) ^ (r0 = (auxL05$1 << 1))) ^ dis$1);
            grad$2 = ((((r1 & r0) | (dis$1 & (r1 | r0))) ^ (auxL05$2 << 1)) ^ dis$2);
            dis$0 = pdis$0[i];
            dis$1 = pdis$1[i];
            dis$2 = pdis$2[i];
            auxL05$0 = dis$0;
            auxL05$1 = ((r0 = ~dis$0) ^ ~dis$1);
            auxL05$2 = ((r0 & ~dis$1) ^ ~dis$2);
            auxL04$0 = grad$0;
            auxL04$1 = ((r0 = ~grad$0) ^ ~grad$1);
            auxL04$2 = ((r0 & ~grad$1) ^ ~grad$2);
            auxL09 = ~defVe$e;
            r0 = (r4 = auxL04$0);
            r2 = r0;
            r0 = ~(r4 = auxL04$1);
            r2 = (r2 | r0);
            r0 = ((r5 = r4) ^ (r4 = (r3 = auxL04$2)));
            r2 = (r2 | r0);
            r1 = (r0 = ((r5 & r4) ^ r3));
            r2 = (r2 | r0);
            delta$0 = ((auxL10 & r2) | tmun00$0);
            delta$1 = ((auxL10 & r1) | tmun00$1);
            tmun00$0 = auxL09;
            r0 = auxL04$2;
            auxL03 = r0;
            slop$e[i - 1] = ((auxL10 & auxL03) | tmun01);
            auxL10 = defVe$e;
            defVe$w = lldefVe$w[i];
            auxO05 = auxL03;
            auxL04$0 = grad$0;
            auxL04$1 = grad$1;
            auxL04$2 = grad$2;
            auxL11 = ~defVe$w;
            r0 = delta$0;
            r2 = (r4 = (r6 = (auxL04$0 >>> 1)));
            r2 = (r2 | (r4 = ~(r6 = (auxL04$1 >>> 1))));
            r2 = (r2 | (r4 = ((r5 = r6) ^ (r6 = (r3 = (auxL04$2 >>> 1))))));
            r2 = (r2 | (r4 = ((r5 & r6) ^ r3)));
            r1 = r4;
            r3 = delta$1;
            r4 = (r6 = ((auxL12 & r2) | tmun02$0));
            r6 = ((auxL12 & r1) | tmun02$1);
            r5 = r6;
            r1 = (r3 | r5);
            delta$0 = (r1 | (~r1 & (r0 & r4)));
            delta$1 = r1;
            tmun02$0 = auxL11;
            r0 = auxL04$2;
            auxL03 = r0;
            slop$w[i - 1] = ((auxL12 & (auxL03 >>> 1)) | tmun03);
            auxL12 = defVe$w;
            defVe$se = lldefVe$se[i];
            level$h[i - 1] = ~(auxO05 | auxL03);
            r0 = (r1 = grad$0);
            r0 = (r0 | (r1 = grad$1));
            r0 = (r0 | ~(r1 = (r2 = grad$2)));
            r0 = (r0 | (r1 ^ r2));
            resultCA$h[i - 1] = ~r0;
            grad$0 = (auxL17$0 ^ auxL05$0);
            grad$1 = (((r0 = (auxL05$0 & auxL17$0)) ^ auxL17$1) ^ auxL05$1);
            grad$2 = ((((r0 & auxL17$1) | (auxL05$1 & (r0 | auxL17$1))) ^ auxL17$2) ^ auxL05$2);
            auxL04$0 = grad$0;
            auxL04$1 = ((r0 = ~grad$0) ^ ~grad$1);
            auxL04$2 = ((r0 & ~grad$1) ^ ~grad$2);
            auxL13 = ~defVe$se;
            r0 = delta$1;
            r1 = (r4 = (r2 = auxL04$0));
            r1 = (r1 | (r4 = ~(r2 = auxL04$1)));
            r1 = (r1 | (r4 = ((r3 = r2) ^ (r2 = (r5 = auxL04$2)))));
            r1 = (r1 | (r4 = ((r3 & r2) ^ r5)));
            r6 = r4;
            r4 = ((auxL14 & r1) | tmun04$0);
            r3 = r4;
            r2 = (r4 = ((auxL14 & r6) | tmun04$1));
            r1 = (r0 | r2);
            r0 = delta$0;
            delta$0 = (r1 | (~r1 & (r0 & r3)));
            delta$1 = r1;
            tmun04$0 = auxL13;
            r0 = auxL04$2;
            auxL03 = r0;
            slop$se[i - 1] = ((auxL14 & auxL03) | tmun05);
            auxL14 = defVe$se;
            defVe$nw = lldefVe$nw[i];
            auxO05 = auxL03;
            auxL04$0 = grad$0;
            auxL04$1 = grad$1;
            auxL04$2 = grad$2;
            auxL15 = ~defVe$nw;
            r0 = delta$1;
            r1 = (r6 = (r2 = tmun07$0));
            r1 = (r1 | (r6 = ~(r2 = tmun07$1)));
            r1 = (r1 | (r6 = ((r5 = r2) ^ (r2 = (r4 = tmun07$2)))));
            r1 = (r1 | (r6 = ((r5 & r2) ^ r4)));
            r3 = r6;
            r4 = ((auxL16 & r1) | tmun06$0);
            r5 = r4;
            r2 = (r4 = ((auxL16 & r3) | tmun06$1));
            r1 = (r0 | r2);
            r0 = delta$0;
            delta$0 = (r1 | (~r1 & (r0 & r5)));
            delta$1 = r1;
            tmun06$0 = auxL15;
            tmun07$0 = auxL04$0;
            tmun07$1 = auxL04$1;
            tmun07$2 = auxL04$2;
            r0 = auxL04$2;
            auxL03 = r0;
            slop$nw[i - 1] = ((auxL16 & tmun09) | tmun08);
            tmun09 = auxL03;
            auxL16 = defVe$nw;
            defVe$ne = lldefVe$ne[i];
            level$d[i - 1] = ~(auxO05 | auxL03);
            r2 = (r1 = grad$0);
            r2 = (r2 | (r1 = grad$1));
            r2 = (r2 | ~(r1 = (r0 = grad$2)));
            r2 = (r2 | (r1 ^ r0));
            resultCA$d[i - 1] = ~r2;
            grad$0 = (auxL17$0 ^ (r0 = (auxL05$0 >>> 1)));
            grad$1 = (((r1 = (r0 & auxL17$0)) ^ auxL17$1) ^ (r0 = (auxL05$1 >>> 1)));
            grad$2 = ((((r1 & auxL17$1) | (r0 & (r1 | auxL17$1))) ^ auxL17$2) ^ (auxL05$2 >>> 1));
            auxL17$0 = dis$0;
            auxL17$1 = dis$1;
            auxL17$2 = dis$2;
            auxL04$0 = grad$0;
            auxL04$1 = grad$1;
            auxL04$2 = grad$2;
            auxL18 = ~defVe$ne;
            r0 = delta$0;
            r1 = delta$1;
            r3 = (r6 = tmun11$0);
            r2 = r3;
            r3 = ~(r6 = tmun11$1);
            r2 = (r2 | r3);
            r3 = ((r4 = r6) ^ (r6 = (r7 = tmun11$2)));
            r2 = (r2 | r3);
            r5 = (r3 = ((r4 & r6) ^ r7));
            r2 = (r2 | r3);
            r6 = ((auxL19 & r2) | tmun10$0);
            r4 = r6;
            r3 = (r6 = ((auxL19 & r5) | tmun10$1));
            r2 = (r1 | r3);
            delta$0 = (r2 | (~r2 & (r0 & r4)));
            delta$1 = r2;
            tmun10$0 = auxL18;
            tmun11$0 = (auxL04$0 << 1);
            tmun11$1 = (auxL04$1 << 1);
            tmun11$2 = (auxL04$2 << 1);
            r0 = auxL04$2;
            auxL03 = r0;
            slop$ne[i - 1] = ((auxL19 & tmun13) | tmun12);
            tmun13 = (auxL03 << 1);
            auxL19 = defVe$ne;
            defVe$sw = lldefVe$sw[i];
            auxO05 = auxL03;
            auxL04$0 = grad$0;
            auxL04$1 = ((r0 = ~grad$0) ^ ~grad$1);
            auxL04$2 = ((r0 & ~grad$1) ^ ~grad$2);
            auxL23 = ~defVe$sw;
            r2 = (r0 = (r4 = auxL04$0));
            r2 = (r2 | (r0 = ~(r4 = auxL04$1)));
            r2 = (r2 | (r0 = ((r5 = r4) ^ (r4 = (r3 = auxL04$2)))));
            r2 = (r2 | (r0 = ((r5 & r4) ^ r3)));
            r1 = r0;
            r4 = ((auxL24 & r2) | tmun14$0);
            r3 = r4;
            r0 = (r4 = ((auxL24 & r1) | tmun14$1));
            r1 = delta$1;
            r2 = (r1 | r0);
            r0 = delta$0;
            deltaR$0[i - 1] = (r2 | (~r2 & (r0 & r3)));
            deltaR$1[i - 1] = r2;
            tmun14$0 = auxL23;
            r0 = auxL04$2;
            auxL03 = r0;
            slop$sw[i - 1] = ((auxL24 & auxL03) | tmun15);
            auxL24 = defVe$sw;
            level$ad[i - 1] = ~(auxO05 | auxL03);
            r2 = (r0 = grad$0);
            r2 = (r2 | (r0 = grad$1));
            r2 = (r2 | ~(r0 = (r1 = grad$2)));
            r2 = (r2 | (r0 ^ r1));
            resultCA$ad[i - 1] = ~r2;
        }
    }
}