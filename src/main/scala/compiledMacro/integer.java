package compiledMacro;

import simulator.PrShift;

public class integer {
    public static void grad_3(PrShift p, int[][] pdis, int[][] slope, int[][] deltaR) {
        int[] slope$e = slope[0], slope$se = slope[1], slope$sw = slope[2], slope$w = slope[3], slope$nw = slope[4], slope$ne = slope[5], deltaR$0 = deltaR[0], deltaR$1 = deltaR[1], pdis$0 = pdis[0], pdis$1 = pdis[1], pdis$2 = pdis[2];
        p.propagate4shift(pdis$0);
        p.propagate4shift(pdis$1);
        p.propagate4shift(pdis$2);
        // initialisation 
        int auxL01$0 = 0, auxL01$1 = 0, auxL01$2 = 0, auxL02$0 = 0, auxL02$1 = 0, auxL02$2 = 0, auxL03$0 = 0, auxL03$1 = 0, auxL03$2 = 0, auxL04$0 = 0, auxL04$1 = 0, auxL04$2 = 0, delta$0 = 0, delta$1 = 0, deltatm1$0 = 0, deltatm1$1 = 0, dis$0 = 0, dis$1 = 0, dis$2 = 0, grad$0 = 0, grad$1 = 0, grad$2 = 0, r0 = 0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0;
        for (int i = 1; i < pdis$0.length; i++) {
            auxL01$0 = dis$0 ^ (r0 = auxL02$0 << 1);
            auxL01$1 = (r1 = r0 & dis$0 ^ dis$1) ^ (r0 = auxL02$1 << 1);
            auxL01$2 = (((r1 & dis$1) | r0 & r1 | dis$1) ^ dis$2) ^ auxL02$2 << 1;
            dis$0 = pdis$0[i];
            dis$1 = pdis$1[i];
            dis$2 = pdis$2[i];
            auxL02$0 = dis$0;
            auxL02$1 = r0 = ~dis$0 ^ ~dis$1;
            auxL02$2 = (r0 & ~dis$1) ^ ~dis$2;
            grad$0 = auxL01$0;
            grad$1 = auxL01$1;
            grad$2 = auxL01$2;
            r0 = (r2 = grad$0);
            r0 = r0 | (r2 = ~grad$1);
            r0 = r0 | (r2 = ~grad$1 ^ grad$2);
            r1 = r2;
            r2 = (r3 = r0);
            r4 = ((r2 & deltatm1$0) ^ deltatm1$1) ^ ~r3 ^ ~(r5 = r1);
            r0 = ~r4;
            delta$0 = (r4 & deltatm1$0) | r0 & r3;
            delta$1 = (r4 & deltatm1$1) | r0 & r5;
            r0 = grad$2;
            slope$e[i - 1] = r0;
            grad$0 = auxL01$0;
            grad$1 = r0 = ~auxL01$0 ^ ~auxL01$1;
            grad$2 = (r0 & ~auxL01$1) ^ ~auxL01$2;
            r0 = (r1 = grad$0);
            r0 = r0 | (r1 = ~grad$1);
            r0 = r0 | (r1 = ~grad$1 ^ grad$2);
            r2 = r1;
            r1 = (r3 = r0 >>> 1);
            r5 = ((r1 & delta$0) ^ delta$1) ^ ~r3 ^ ~(r4 = r2 >>> 1);
            r0 = ~r5;
            delta$0 = (r5 & delta$0) | r0 & r3;
            delta$1 = (r5 & delta$1) | r0 & r4;
            r0 = grad$2;
            slope$w[i - 1] = r0 >>> 1;
            auxL01$0 = auxL03$0 ^ auxL02$0;
            auxL01$1 = (r0 = auxL02$0 & auxL03$0 ^ auxL03$1) ^ auxL02$1;
            auxL01$2 = (((r0 & auxL03$1) | auxL02$1 & r0 | auxL03$1) ^ auxL03$2) ^ auxL02$2;
            grad$0 = auxL01$0;
            grad$1 = auxL01$1;
            grad$2 = auxL01$2;
            r1 = grad$0;
            r0 = r1;
            r1 = ~grad$1;
            r0 = r0 | r1;
            r2 = (r1 = ~grad$1 ^ grad$2);
            r0 = r0 | r1;
            r4 = (r3 = r0);
            r5 = ((r4 & delta$0) ^ delta$1) ^ ~r3 ^ ~(r1 = r2);
            r0 = ~r5;
            delta$0 = (r5 & delta$0) | r0 & r3;
            delta$1 = (r5 & delta$1) | r0 & r1;
            r0 = grad$2;
            slope$se[i - 1] = r0;
            grad$0 = auxL01$0;
            grad$1 = r0 = ~auxL01$0 ^ ~auxL01$1;
            grad$2 = (r0 & ~auxL01$1) ^ ~auxL01$2;
            r2 = grad$0;
            r1 = r2;
            r2 = ~grad$1;
            r1 = r1 | r2;
            r0 = (r2 = ~grad$1 ^ grad$2);
            r1 = r1 | r2;
            deltatm1$0 = r1;
            deltatm1$1 = r0;
            r0 = grad$2;
            slope$nw[i - 1] = r0;
            auxL01$0 = auxL03$0 ^ (r1 = auxL02$0 >>> 1);
            auxL01$1 = (r0 = r1 & auxL03$0 ^ auxL03$1) ^ (r1 = auxL02$1 >>> 1);
            auxL01$2 = (((r0 & auxL03$1) | r1 & r0 | auxL03$1) ^ auxL03$2) ^ auxL02$2 >>> 1;
            auxL03$0 = dis$0;
            auxL03$1 = dis$1;
            auxL03$2 = dis$2;
            grad$0 = auxL01$0;
            grad$1 = auxL01$1;
            grad$2 = auxL01$2;
            r0 = grad$0;
            r2 = r0;
            r0 = ~grad$1;
            r2 = r2 | r0;
            r1 = (r0 = ~grad$1 ^ grad$2);
            r2 = r2 | r0;
            r4 = (r5 = r2);
            r3 = ((r4 & delta$0) ^ delta$1) ^ ~r5 ^ ~(r0 = r1);
            r1 = ~r3;
            delta$0 = (r3 & delta$0) | r1 & r5;
            delta$1 = (r3 & delta$1) | r1 & r0;
            r0 = grad$2;
            slope$sw[i - 1] = r0;
            grad$0 = auxL01$0;
            grad$1 = r0 = ~auxL01$0 ^ ~auxL01$1;
            grad$2 = (r0 & ~auxL01$1) ^ ~auxL01$2;
            r1 = grad$0;
            r2 = r1;
            r1 = ~grad$1;
            r2 = r2 | r1;
            r0 = (r1 = ~grad$1 ^ grad$2);
            r2 = r2 | r1;
            r3 = (r5 = r2 << 1);
            r1 = ((r3 & deltatm1$0) ^ deltatm1$1) ^ ~r5 ^ ~(r4 = r0 << 1);
            r0 = ~r1;
            deltatm1$0 = (r1 & deltatm1$0) | r0 & r5;
            deltatm1$1 = (r1 & deltatm1$1) | r0 & r4;
            deltaR$0[i - 1] = delta$0;
            deltaR$1[i - 1] = delta$1;
            r0 = grad$2;
            slope$ne[i - 1] = r0 << 1;
        }
    }
}