package compiledMacro;

import simulator.PrShift;

public class integer {

    public static void slopDelta_3(PrShift p, int[][] pdis, int[][] slop, int[][] deltaR, int[][] level, int[][] lldefVe) {
        int[] lldefVe$e = lldefVe[0], lldefVe$se = lldefVe[1], lldefVe$sw = lldefVe[2], lldefVe$w = lldefVe[3], lldefVe$nw = lldefVe[4], lldefVe$ne = lldefVe[5], slop$e = slop[0], slop$se = slop[1], slop$sw = slop[2], slop$w = slop[3], slop$nw = slop[4], slop$ne = slop[5], deltaR$0 = deltaR[0], deltaR$1 = deltaR[1], level$h = level[0], level$d = level[1], level$ad = level[2], pdis$0 = pdis[0], pdis$1 = pdis[1], pdis$2 = pdis[2];
        p.propagate4shift(pdis$0);
        p.propagate4shift(pdis$1);
        p.propagate4shift(pdis$2);
// initialisation 
        int auxL02 = 0, auxL03$0 = 0, auxL03$1 = 0, auxL03$2 = 0, auxL04$0 = 0, auxL04$1 = 0, auxL04$2 = 0, auxL05$0 = 0, auxL05$1 = 0, auxL05$2 = 0, auxL06$0 = 0, auxL06$1 = 0, auxL07$0 = 0, auxL07$1 = 0, auxL07$2 = 0, auxL07$3 = 0, auxO02 = 0, defVe$e = 0, defVe$ne = 0, defVe$nw = 0, defVe$se = 0, defVe$sw = 0, defVe$w = 0, delta$0 = 0, delta$1 = 0, dis$0 = 0, dis$1 = 0, dis$2 = 0, grad$0 = 0, grad$1 = 0, grad$2 = 0, r0 = 0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0, r7 = 0, tmun00$0 = 0, tmun00$1 = 0, tmun01 = 0, tmun02$0 = 0, tmun02$1 = 0, tmun03 = 0, tmun04$0 = 0, tmun04$1 = 0, tmun05 = 0, tmun06$0 = 0, tmun06$1 = 0, tmun07$0 = 0, tmun07$1 = 0, tmun07$2 = 0, tmun08 = 0, tmun09$0 = 0, tmun09$1 = 0, tmun10$0 = 0, tmun10$1 = 0, tmun10$2 = 0, tmun11 = 0, tmun12$0 = 0, tmun12$1 = 0, tmun13 = 0;
        for (int i = 1; i < pdis$0.length - 1; i++) {
            defVe$e = lldefVe$e[i];
            grad$0 = ((r0 = (auxL04$0 << 1)) ^ dis$0);
            grad$1 = (((r1 = (dis$0 & r0)) ^ (r0 = (auxL04$1 << 1))) ^ dis$1);
            grad$2 = ((((r1 & r0) | (dis$1 & (r1 | r0))) ^ (auxL04$2 << 1)) ^ dis$2);
            dis$0 = pdis$0[i];
            dis$1 = pdis$1[i];
            dis$2 = pdis$2[i];
            auxL04$0 = dis$0;
            auxL04$1 = ((r0 = ~dis$0) ^ ~dis$1);
            auxL04$2 = ((r0 & ~dis$1) ^ ~dis$2);
            auxL03$0 = grad$0;
            auxL03$1 = ((r0 = ~grad$0) ^ ~grad$1);
            auxL03$2 = ((r0 & ~grad$1) ^ ~grad$2);
            r0 = (r1 = auxL03$0);
            r5 = r0;
            r0 = ~(r1 = auxL03$1);
            r5 = (r5 | r0);
            r0 = ((r4 = r1) ^ (r1 = (r2 = auxL03$2)));
            r5 = (r5 | r0);
            r3 = (r0 = ((r4 & r1) ^ r2));
            r5 = (r5 | r0);
            delta$0 = ((tmun01 & r5) | tmun00$0);
            delta$1 = ((tmun01 & r3) | tmun00$1);
            tmun00$0 = (r0 = ~defVe$e);
            tmun01 = defVe$e;
            defVe$w = lldefVe$w[i];
            r0 = auxL03$2;
            auxL02 = r0;
            slop$e[i - 1] = auxL02;
            auxO02 = auxL02;
            auxL03$0 = grad$0;
            auxL03$1 = grad$1;
            auxL03$2 = grad$2;
            r0 = delta$0;
            r1 = (r2 = (auxL03$0 >>> 1));
            r6 = r1;
            r1 = ~(r2 = (auxL03$1 >>> 1));
            r6 = (r6 | r1);
            r1 = ((r3 = r2) ^ (r2 = (r5 = (auxL03$2 >>> 1))));
            r6 = (r6 | r1);
            r4 = (r1 = ((r3 & r2) ^ r5));
            r6 = (r6 | r1);
            r3 = (r1 = ((tmun03 & r6) | tmun02$0));
            r1 = ((tmun03 & r4) | tmun02$1);
            r2 = r1;
            r1 = delta$1;
            delta$0 = ((r4 = (r1 | r2)) | (~r4 & (r0 & r3)));
            delta$1 = r4;
            tmun02$0 = (r0 = ~defVe$w);
            tmun03 = defVe$w;
            defVe$se = lldefVe$se[i];
            r0 = auxL03$2;
            auxL02 = r0;
            slop$w[i - 1] = (auxL02 >>> 1);
            level$h[i - 1] = ~(auxO02 | auxL02);
            grad$0 = (auxL05$0 ^ auxL04$0);
            grad$1 = (((r0 = (auxL04$0 & auxL05$0)) ^ auxL05$1) ^ auxL04$1);
            grad$2 = ((((r0 & auxL05$1) | (auxL04$1 & (r0 | auxL05$1))) ^ auxL05$2) ^ auxL04$2);
            auxL03$0 = grad$0;
            auxL03$1 = ((r0 = ~grad$0) ^ ~grad$1);
            auxL03$2 = ((r0 & ~grad$1) ^ ~grad$2);
            r0 = (r1 = (r2 = auxL03$0));
            r0 = (r0 | (r1 = ~(r2 = auxL03$1)));
            r0 = (r0 | (r1 = ((r3 = r2) ^ (r2 = (r5 = auxL03$2)))));
            r0 = (r0 | (r1 = ((r3 & r2) ^ r5)));
            r4 = r1;
            r2 = ((tmun05 & r0) | tmun04$0);
            r3 = r2;
            r1 = (r2 = ((tmun05 & r4) | tmun04$1));
            r0 = delta$0;
            r2 = delta$1;
            delta$0 = ((r4 = (r2 | r1)) | (~r4 & (r0 & r3)));
            delta$1 = r4;
            tmun04$0 = (r0 = ~defVe$se);
            tmun05 = defVe$se;
            defVe$nw = lldefVe$nw[i];
            r0 = auxL03$2;
            auxL02 = r0;
            slop$se[i - 1] = auxL02;
            auxO02 = auxL02;
            auxL03$0 = grad$0;
            auxL03$1 = grad$1;
            auxL03$2 = grad$2;
            r0 = delta$0;
            r4 = (r5 = (r3 = tmun07$0));
            r4 = (r4 | (r5 = ~(r3 = tmun07$1)));
            r4 = (r4 | (r5 = ((r6 = r3) ^ (r3 = (r1 = tmun07$2)))));
            r4 = (r4 | (r5 = ((r6 & r3) ^ r1)));
            r2 = r5;
            r3 = (r5 = ((tmun08 & r4) | tmun06$0));
            r5 = ((tmun08 & r2) | tmun06$1);
            r1 = r5;
            r2 = delta$1;
            delta$0 = ((r4 = (r2 | r1)) | (~r4 & (r0 & r3)));
            delta$1 = r4;
            tmun07$0 = auxL03$0;
            tmun07$1 = auxL03$1;
            tmun07$2 = auxL03$2;
            tmun06$0 = (r0 = ~defVe$nw);
            tmun08 = defVe$nw;
            defVe$ne = lldefVe$ne[i];
            r0 = auxL03$2;
            auxL02 = r0;
            slop$nw[i] = auxL02;
            level$d[i - 1] = ~(auxO02 | auxL02);
            grad$0 = (auxL05$0 ^ (r1 = (auxL04$0 >>> 1)));
            grad$1 = (((r0 = (r1 & auxL05$0)) ^ auxL05$1) ^ (r1 = (auxL04$1 >>> 1)));
            grad$2 = ((((r0 & auxL05$1) | (r1 & (r0 | auxL05$1))) ^ auxL05$2) ^ (auxL04$2 >>> 1));
            auxL05$0 = dis$0;
            auxL05$1 = dis$1;
            auxL05$2 = dis$2;
            auxL03$0 = grad$0;
            auxL03$1 = grad$1;
            auxL03$2 = grad$2;
            r4 = (r5 = (r1 = tmun10$0));
            r4 = (r4 | (r5 = ~(r1 = tmun10$1)));
            r4 = (r4 | (r5 = ((r2 = r1) ^ (r1 = (r0 = tmun10$2)))));
            r4 = (r4 | (r5 = ((r2 & r1) ^ r0)));
            r3 = r5;
            r1 = (r0 = ((tmun11 & r4) | tmun09$0));
            r0 = ((tmun11 & r3) | tmun09$1);
            r2 = r0;
            r0 = delta$0;
            r3 = delta$1;
            delta$0 = ((r4 = (r3 | r2)) | (~r4 & (r0 & r1)));
            delta$1 = r4;
            tmun10$0 = (auxL03$0 << 1);
            tmun10$1 = (auxL03$1 << 1);
            tmun10$2 = (auxL03$2 << 1);
            tmun09$0 = (r0 = ~defVe$ne);
            tmun11 = defVe$ne;
            defVe$sw = lldefVe$sw[i];
            r0 = auxL03$2;
            auxL02 = r0;
            slop$ne[i] = (auxL02 << 1);
            auxO02 = auxL02;
            auxL03$0 = grad$0;
            auxL03$1 = ((r0 = ~grad$0) ^ ~grad$1);
            auxL03$2 = ((r0 & ~grad$1) ^ ~grad$2);
            r0 = delta$0;
            r1 = delta$1;
            r5 = (r2 = (r6 = auxL03$0));
            r5 = (r5 | (r2 = ~(r6 = auxL03$1)));
            r5 = (r5 | (r2 = ((r4 = r6) ^ (r6 = (r7 = auxL03$2)))));
            r5 = (r5 | (r2 = ((r4 & r6) ^ r7)));
            r3 = r2;
            r2 = (r4 = ((tmun13 & r5) | tmun12$0));
            r4 = ((tmun13 & r3) | tmun12$1);
            r6 = r4;
            deltaR$0[i - 1] = ((r3 = (r1 | r6)) | (~r3 & (r0 & r2)));
            deltaR$1[i - 1] = r3;
            tmun13 = defVe$sw;
            tmun12$0 = (r0 = ~defVe$sw);
            r0 = auxL03$2;
            auxL02 = r0;
            slop$sw[i - 1] = auxL02;
            level$ad[i - 1] = ~(auxO02 | auxL02);
        }
    }
}